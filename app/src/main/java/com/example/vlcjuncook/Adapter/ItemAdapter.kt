package com.example.vlcjuncook.Adapterimport android.net.Uriimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewimport androidx.recyclerview.widget.RecyclerViewimport com.example.vlcjuncook.Rimport org.videolan.libvlc.LibVLCimport org.videolan.libvlc.Mediaimport org.videolan.libvlc.MediaPlayerimport org.videolan.libvlc.util.VLCVideoLayoutclass ItemAdapter(private val dataSet: Array<String>):    RecyclerView.Adapter<ItemAdapter.ViewHolder>() {    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {        // Define click listener for the ViewHolder's View        val videoLayout: VLCVideoLayout = view.findViewById(R.id.vlc_video_item)        var vlcMediaPlayer: MediaPlayer? = null        var libVLC: LibVLC? = null    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemAdapter.ViewHolder {        val view = LayoutInflater.from(parent.context)            .inflate(R.layout.vlc_item,parent,false)        return ViewHolder(view)    }    override fun onBindViewHolder(holder: ItemAdapter.ViewHolder, position: Int) {        // If VLC is already initialized, release resources        holder.vlcMediaPlayer?.apply {            stop()            detachViews()            release()        }        holder.libVLC?.release()        // Initialize LibVLC and MediaPlayer        holder.libVLC = LibVLC(            holder.itemView.context, arrayListOf(                "--file-caching=150",                "--network-caching=150",                "--clock-jitter=0",                "--live-caching=150",                "--drop-late-frames",                "--sout-rtp-proto=udp",                "--skip-frames",                "--vout=android-display",                "--sout-transcode-vb=20",                "--no-audio",                "--sout=#transcode{vcodec=h264,vb=20,acodec=mpga,ab=128,channels=2,samplerate=44100}:duplicate{dst=display}",                "--sout-x264-nf"            )        )        var medias = Media(holder.libVLC, Uri.parse(dataSet[position]))        holder.vlcMediaPlayer = MediaPlayer(holder.libVLC).apply {            media = medias            attachViews(holder.videoLayout, null, false, false)            setEventListener { event -> /* Handle events */ }            play()        }        medias.release()    }    override fun onViewRecycled(holder: ViewHolder) {        super.onViewRecycled(holder)        // Clean up resources when the view is recycled        //holder.vlcMediaPlayer?.apply {         //   stop()        //     detachViews()        //      release()        //  }        //  holder.libVLC?.release()    }    override fun getItemCount(): Int {       return dataSet.size    }}