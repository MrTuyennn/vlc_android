package com.example.vlcjuncook.Viewimport android.Manifestimport android.app.Activityimport android.content.ContentValues.TAGimport android.content.pm.PackageManagerimport android.net.Uriimport android.util.Logimport android.view.SurfaceViewimport android.view.Viewimport android.widget.Toastimport android.widget.VideoViewimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.PickVisualMediaRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.material3.Buttonimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.DisposableEffectimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.rememberimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.viewinterop.AndroidViewimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.navigation.NavControllerimport androidx.navigation.compose.rememberNavControllerimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport org.videolan.libvlc.LibVLCimport org.videolan.libvlc.Mediaimport org.videolan.libvlc.MediaPlayerimport org.videolan.libvlc.util.VLCVideoLayout@Composablefun VLCView(uri: String) {    val pickMedia = rememberLauncherForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri ->        // Callback is invoked after the user selects a media item or closes the        // photo picker.        if (uri != null) {            Log.d("PhotoPicker", "Selected URI: $uri")        } else {            Log.d("PhotoPicker", "No media selected")        }    }    val context = LocalContext.current//    val libVLC = remember() {//        LibVLC(//            context, arrayListOf(//                "--file-caching=150",//                "--network-caching=150",//                "--clock-jitter=0",//                "--live-caching=150",//                "--drop-late-frames",//                "--sout-rtp-proto=udp",//                "--skip-frames",//                "--vout=android-display",//                "--sout-transcode-vb=20",//                "--no-audio",//                "--sout=#transcode{vcodec=h264,vb=20,acodec=mpga,ab=128,channels=2,samplerate=44100}:duplicate{dst=display}",//                "--sout-x264-nf"//            )//        )//    }//    val media = remember(key1 = uri) { Media(libVLC, Uri.parse(uri)) }//    val mediaPlayer = remember(key1 = uri) {//        MediaPlayer(libVLC).apply {//            setMedia(media)//        }//    }    // Clean up the media player resources when the composable is disposed//    LaunchedEffect(mediaPlayer) {//        mediaPlayer.play()////        mediaPlayer.setEventListener { event ->//            handleVlcEvents(event)//        }//    }//    DisposableEffect(mediaPlayer) {//        onDispose {//            mediaPlayer.release()//        }//    }    Column(        modifier = Modifier.fillMaxWidth().fillMaxHeight(),        horizontalAlignment = Alignment.CenterHorizontally,        verticalArrangement = Arrangement.Center    ) {        Button(onClick = {//            pickMedia.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly))            when {                ContextCompat.checkSelfPermission(                    context,                    Manifest.permission.READ_EXTERNAL_STORAGE                ) == PackageManager.PERMISSION_GRANTED -> {                    Log.e("====>","abc")                    // You can use the API that requires the permission.                }                ActivityCompat.shouldShowRequestPermissionRationale(                    context as Activity, Manifest.permission.READ_EXTERNAL_STORAGE) -> {                    // In an educational UI, explain to the user why your app requires this                    // permission for a specific feature to behave as expected, and what                    // features are disabled if it's declined. In this UI, include a                    // "cancel" or "no thanks" button that lets the user continue                    // using your app without granting the permission.                }                else -> {                    // You can directly ask for the permission.                    Toast.makeText(context,"Permission deneid",Toast.LENGTH_SHORT).show()                }            }        }) {            Text(text = "Check Permission")        }//        Box(//            modifier = Modifier//                .height(300.dp)//                .fillMaxWidth()//                .background(Color.Red)//        ) {//            AndroidView(//                modifier = Modifier,//                factory = { context ->//                    VLCVideoLayout(context).apply {//                        mediaPlayer.attachViews(this, null, false, false)//                    }//                },//                )////        }//        Text(text = uri, color = Color.Black)//        Text(text = uri, color = Color.Black)    }}fun handleVlcEvents(event: MediaPlayer.Event?) {    when (event?.type) {        MediaPlayer.Event.Opening, MediaPlayer.Event.Buffering -> {            Log.d(TAG, "VLC Event Opening/Buffering")        }        MediaPlayer.Event.Playing -> {            Log.d(TAG, "VLC Event Playing")        }        MediaPlayer.Event.Paused -> {            Log.d(TAG, "VLC Event Paused")        }        MediaPlayer.Event.Stopped -> {            Log.d(TAG, "VLC Event Stopped")        }        MediaPlayer.Event.EncounteredError -> {            Log.d(TAG, "VLC Event Error")        }        MediaPlayer.Event.EndReached -> {            Log.d(TAG, "VLC Event End Reached")        }        MediaPlayer.Event.TimeChanged -> {            Log.d(TAG, "VLC Event Time Changed")        }        MediaPlayer.Event.PositionChanged -> {            Log.d(TAG, "VLC Event Position Changed")        }        MediaPlayer.Event.SeekableChanged -> {            Log.d(TAG, "VLC Event Seekable Changed")        }        MediaPlayer.Event.PausableChanged -> {            Log.d(TAG, "VLC Event Pausable Changed")        }        MediaPlayer.Event.LengthChanged -> {            Log.d(TAG, "VLC Event Length Changed")        }        MediaPlayer.Event.Vout -> {            Log.d(TAG, "VLC Event Video Output")        }        MediaPlayer.Event.ESAdded -> {            Log.d(TAG, "VLC Event Elementary Stream Added")        }        MediaPlayer.Event.ESDeleted -> {            Log.d(TAG, "VLC Event Elementary Stream Deleted")        }        MediaPlayer.Event.ESSelected -> {            Log.d(TAG, "VLC Event Elementary Stream Selected")        }        else -> {            Log.d(TAG, "VLC Event Other: ${event?.type}")        }    }}