package com.example.vlcjuncook.Viewimport android.content.ContentValues.TAGimport android.net.Uriimport android.util.Logimport android.view.SurfaceViewimport android.view.Viewimport android.widget.VideoViewimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.DisposableEffectimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.viewinterop.AndroidViewimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport org.videolan.libvlc.LibVLCimport org.videolan.libvlc.Mediaimport org.videolan.libvlc.MediaPlayerimport org.videolan.libvlc.util.VLCVideoLayout@Composablefun VLCView(uri: String) {    val context = LocalContext.current    val libVLC = remember() {        LibVLC(            context, arrayListOf(                "--file-caching=150",                "--network-caching=150",                "--clock-jitter=0",                "--live-caching=150",                "--drop-late-frames",                "--sout-rtp-proto=udp",                "--skip-frames",                "--vout=android-display",                "--sout-transcode-vb=20",                "--no-audio",                "--sout=#transcode{vcodec=h264,vb=20,acodec=mpga,ab=128,channels=2,samplerate=44100}:duplicate{dst=display}",                "--sout-x264-nf"            )        )    }    val media = remember(key1 = uri) { Media(libVLC, Uri.parse(uri)) }    val mediaPlayer = remember(key1 = uri) {        MediaPlayer(libVLC).apply {            setMedia(media)        }    }    // Clean up the media player resources when the composable is disposed    LaunchedEffect(mediaPlayer) {        mediaPlayer.play()        mediaPlayer.setEventListener { event ->            handleVlcEvents(event)        }    }    DisposableEffect(mediaPlayer) {        onDispose {            mediaPlayer.release()        }    }    Column {        Box(            modifier = Modifier                .height(300.dp)                .fillMaxWidth()                .background(Color.Red)        ) {            AndroidView(                modifier = Modifier,                factory = { context ->                    VLCVideoLayout(context).apply {                        mediaPlayer.attachViews(this, null, false, false)                    }                },                )        }        Text(text = uri)    }}fun handleVlcEvents(event: MediaPlayer.Event?) {    when (event?.type) {        MediaPlayer.Event.Opening, MediaPlayer.Event.Buffering -> {            Log.d(TAG, "VLC Event Opening/Buffering")        }        MediaPlayer.Event.Playing -> {            Log.d(TAG, "VLC Event Playing")        }        MediaPlayer.Event.Paused -> {            Log.d(TAG, "VLC Event Paused")        }        MediaPlayer.Event.Stopped -> {            Log.d(TAG, "VLC Event Stopped")        }        MediaPlayer.Event.EncounteredError -> {            Log.d(TAG, "VLC Event Error")        }        MediaPlayer.Event.EndReached -> {            Log.d(TAG, "VLC Event End Reached")        }        MediaPlayer.Event.TimeChanged -> {            Log.d(TAG, "VLC Event Time Changed")        }        MediaPlayer.Event.PositionChanged -> {            Log.d(TAG, "VLC Event Position Changed")        }        MediaPlayer.Event.SeekableChanged -> {            Log.d(TAG, "VLC Event Seekable Changed")        }        MediaPlayer.Event.PausableChanged -> {            Log.d(TAG, "VLC Event Pausable Changed")        }        MediaPlayer.Event.LengthChanged -> {            Log.d(TAG, "VLC Event Length Changed")        }        MediaPlayer.Event.Vout -> {            Log.d(TAG, "VLC Event Video Output")        }        MediaPlayer.Event.ESAdded -> {            Log.d(TAG, "VLC Event Elementary Stream Added")        }        MediaPlayer.Event.ESDeleted -> {            Log.d(TAG, "VLC Event Elementary Stream Deleted")        }        MediaPlayer.Event.ESSelected -> {            Log.d(TAG, "VLC Event Elementary Stream Selected")        }        else -> {            Log.d(TAG, "VLC Event Other: ${event?.type}")        }    }}